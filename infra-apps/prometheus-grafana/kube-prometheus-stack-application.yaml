apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kube-prometheus-stack
  namespace: argocd
spec:
  project: default
  source:
    chart: kube-prometheus-stack
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: 45.1.0
    helm:
      releaseName: kube-prometheus-stack
      values: |-
        defaultRules:
          create: false
        additionalPrometheusRulesMap: 
          custom-rules:
            groups:
            - name: portfolio
              rules:
              - alert: InstanceHighMemoryUsage
                expr: (100 - (avg by (instance) (node_memory_MemAvailable_bytes{job="node-exporter"}) / avg by (instance) (node_memory_MemTotal_bytes{job="node-exporter"})) * 100) > 70
                for: 1m
                labels:
                  severity: warning
                annotations:
                  summary: "Instance {{ $labels.instance }}: memory usage high"
                  description: "{{ $labels.instance }} uses more than 70% of it's memory"
              - alert: InstanceLowCpuUsage
                expr: (sum(rate(node_cpu_seconds_total{mode="user"}[5m])) by (instance) / count(node_cpu_seconds_total{mode="user"} > 0) by (instance) * 100) < 10
                for: 1m
                labels:
                  severity: warning
                annotations:
                  summary: "Instance {{ $labels.instance }}: cpu usage low"
                  description: "{{ $labels.instance }} uses less than 10% of it's cpu, you are wasting money"
        alertmanager:
          alertmanagerSpec:
            useExistingSecret: true
            configSecret: "alert-manager-secret"  
        prometheus:
          prometheusSpec:
            # https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/monitoring.md#configure-prometheus
            # allow prometeues to discover podMonitor and serviceMonitor outside it's namespace
            podMonitorSelectorNilUsesHelmValues: false
            serviceMonitorSelectorNilUsesHelmValues: false
        grafana:
          admin:
            existingSecret: "grafana-secret"
            userKey: username
            passwordKey: password
          defaultDashboardsEnabled: false
          defaultDashboardsTimezone: Israel
          sidecar:
            provider:
              allowUiUpdates: true
  destination:
    server: "https://kubernetes.default.svc"
    namespace: monitoring

  syncPolicy:
     automated:
       prune: true
       selfHeal: true
     syncOptions:
      - ServerSideApply=true
      - CreateNamespace=true